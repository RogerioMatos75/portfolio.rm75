generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Technology {
  id                String              @id @default(uuid())
  name              String
  description       String
  icon              String?
  destaque          Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  projects          Project[]           @relation("ProjectTechnologies")
  skills            Skill[]             @relation("SkillTechnologies")
  ProjectTechnology ProjectTechnology[]

  @@map("technologies")
}

model Project {
  id                String              @id @default(uuid())
  name              String
  description       String
  tipo              String
  imageUrl          String[]
  nivel             Int
  repositorio       String
  destaque          Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  technologies      Technology[]        @relation("ProjectTechnologies")
  ProjectTechnology ProjectTechnology[]

  @@map("projects")
}

model ProjectTechnology {
  projectId    String
  technologyId String
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@id([projectId, technologyId])
  @@index([projectId])
  @@index([technologyId])
  @@map("project_technologies")
}

model Skill {
  id           String       @id @default(uuid())
  name         String
  category     String
  proficiency  Int          @default(0)
  icon         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  technologies Technology[] @relation("SkillTechnologies")

  @@index([category])
  @@map("skills")
}

model Experience {
  id          String    @id @default(uuid())
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("experiences")
}

model Education {
  id          String    @id @default(uuid())
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("educations")
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
